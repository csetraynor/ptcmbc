// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace nullml_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "models/null/nullml.stan");
    reader.add_event(49, 49, "end", "models/null/nullml.stan");
    return reader;
}

class nullml_model : public prob_grad {
private:
    int Nobs;
    int Ncen;
    int J;
    vector_d yobs;
    vector_d ycen;
    vector<int> Jobs;
    vector<int> Jcen;
    double scale;
    double tau_al;
public:
    nullml_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    nullml_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "nullml_model_namespace::nullml_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "Nobs", "int", context__.to_vec());
            Nobs = int(0);
            vals_i__ = context__.vals_i("Nobs");
            pos__ = 0;
            Nobs = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "Ncen", "int", context__.to_vec());
            Ncen = int(0);
            vals_i__ = context__.vals_i("Ncen");
            pos__ = 0;
            Ncen = vals_i__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("yobs", "Nobs", Nobs);
            context__.validate_dims("data initialization", "yobs", "vector_d", context__.to_vec(Nobs));
            validate_non_negative_index("yobs", "Nobs", Nobs);
            yobs = vector_d(static_cast<Eigen::VectorXd::Index>(Nobs));
            vals_r__ = context__.vals_r("yobs");
            pos__ = 0;
            size_t yobs_i_vec_lim__ = Nobs;
            for (size_t i_vec__ = 0; i_vec__ < yobs_i_vec_lim__; ++i_vec__) {
                yobs[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("ycen", "Ncen", Ncen);
            context__.validate_dims("data initialization", "ycen", "vector_d", context__.to_vec(Ncen));
            validate_non_negative_index("ycen", "Ncen", Ncen);
            ycen = vector_d(static_cast<Eigen::VectorXd::Index>(Ncen));
            vals_r__ = context__.vals_r("ycen");
            pos__ = 0;
            size_t ycen_i_vec_lim__ = Ncen;
            for (size_t i_vec__ = 0; i_vec__ < ycen_i_vec_lim__; ++i_vec__) {
                ycen[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("Jobs", "Nobs", Nobs);
            context__.validate_dims("data initialization", "Jobs", "int", context__.to_vec(Nobs));
            validate_non_negative_index("Jobs", "Nobs", Nobs);
            Jobs = std::vector<int>(Nobs,int(0));
            vals_i__ = context__.vals_i("Jobs");
            pos__ = 0;
            size_t Jobs_limit_0__ = Nobs;
            for (size_t i_0__ = 0; i_0__ < Jobs_limit_0__; ++i_0__) {
                Jobs[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("Jcen", "Ncen", Ncen);
            context__.validate_dims("data initialization", "Jcen", "int", context__.to_vec(Ncen));
            validate_non_negative_index("Jcen", "Ncen", Ncen);
            Jcen = std::vector<int>(Ncen,int(0));
            vals_i__ = context__.vals_i("Jcen");
            pos__ = 0;
            size_t Jcen_limit_0__ = Ncen;
            for (size_t i_0__ = 0; i_0__ < Jcen_limit_0__; ++i_0__) {
                Jcen[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "scale", "double", context__.to_vec());
            scale = double(0);
            vals_r__ = context__.vals_r("scale");
            pos__ = 0;
            scale = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"Nobs",Nobs,0);
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"Ncen",Ncen,0);
            current_statement_begin__ = 10;
            check_greater_or_equal(function__,"J",J,0);
            current_statement_begin__ = 11;
            current_statement_begin__ = 12;
            current_statement_begin__ = 13;
            current_statement_begin__ = 14;
            current_statement_begin__ = 15;
            // initialize data variables
            current_statement_begin__ = 19;
            tau_al = double(0);
            stan::math::fill(tau_al,DUMMY_VAR__);

            current_statement_begin__ = 21;
            stan::math::assign(tau_al, 10.0);

            // validate transformed data
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"tau_al",tau_al,0);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            ++num_params_r__;
            current_statement_begin__ = 26;
            ++num_params_r__;
            current_statement_begin__ = 27;
            validate_non_negative_index("theta", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 28;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~nullml_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("alpha_raw")))
            throw std::runtime_error("variable alpha_raw missing");
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha_raw", "double", context__.to_vec());
        double alpha_raw(0);
        alpha_raw = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what());
        }

        if (!(context__.contains_r("tau_theta")))
            throw std::runtime_error("variable tau_theta missing");
        vals_r__ = context__.vals_r("tau_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_theta", "double", context__.to_vec());
        double tau_theta(0);
        tau_theta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_theta: ") + e.what());
        }

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "J", J);
        context__.validate_dims("initialization", "theta", "vector_d", context__.to_vec(J));
        vector_d theta(static_cast<Eigen::VectorXd::Index>(J));
        for (int j1__ = 0U; j1__ < J; ++j1__)
            theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("mu_theta")))
            throw std::runtime_error("variable mu_theta missing");
        vals_r__ = context__.vals_r("mu_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_theta", "double", context__.to_vec());
        double mu_theta(0);
        mu_theta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_theta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.scalar_constrain(lp__);
            else
                alpha_raw = in__.scalar_constrain();

            local_scalar_t__ tau_theta;
            (void) tau_theta;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_theta = in__.scalar_lb_constrain(0,lp__);
            else
                tau_theta = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_constrain(J,lp__);
            else
                theta = in__.vector_constrain(J);

            local_scalar_t__ mu_theta;
            (void) mu_theta;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_theta = in__.scalar_constrain(lp__);
            else
                mu_theta = in__.scalar_constrain();


            // transformed parameters
            current_statement_begin__ = 32;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);


            current_statement_begin__ = 33;
            stan::math::assign(alpha, stan::math::exp((tau_al * alpha_raw)));

            // validate transformed parameters
            if (stan::math::is_uninitialized(alpha)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alpha";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            check_greater_or_equal(function__,"alpha",alpha,0);

            // model body

            current_statement_begin__ = 38;
            for (int i = 1; i <= Nobs; ++i) {

                current_statement_begin__ = 39;
                lp_accum__.add(weibull_log<propto__>(get_base1(yobs,i,"yobs",1), alpha, stan::math::exp((-(get_base1(theta,get_base1(Jobs,i,"Jobs",1),"theta",1)) / alpha))));
            }
            current_statement_begin__ = 41;
            for (int i = 1; i <= Ncen; ++i) {

                current_statement_begin__ = 42;
                lp_accum__.add(weibull_ccdf_log(get_base1(ycen,i,"ycen",1),alpha,stan::math::exp((-(get_base1(theta,get_base1(Jcen,i,"Jcen",1),"theta",1)) / alpha))));
            }
            current_statement_begin__ = 45;
            lp_accum__.add(normal_log<propto__>(alpha_raw, 0.0, 1.0));
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(theta, mu_theta, tau_theta));
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(mu_theta, 0, 1));
            current_statement_begin__ = 48;
            lp_accum__.add(exponential_log<propto__>(tau_theta, 0.10000000000000001));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_raw");
        names__.push_back("tau_theta");
        names__.push_back("theta");
        names__.push_back("mu_theta");
        names__.push_back("alpha");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "nullml_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha_raw = in__.scalar_constrain();
        double tau_theta = in__.scalar_lb_constrain(0);
        vector_d theta = in__.vector_constrain(J);
        double mu_theta = in__.scalar_constrain();
        vars__.push_back(alpha_raw);
        vars__.push_back(tau_theta);
            for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
        vars__.push_back(mu_theta);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 32;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);


            current_statement_begin__ = 33;
            stan::math::assign(alpha, stan::math::exp((tau_al * alpha_raw)));

            // validate transformed parameters
            current_statement_begin__ = 32;
            check_greater_or_equal(function__,"alpha",alpha,0);

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(alpha);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "nullml_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_theta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_theta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_theta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_theta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef nullml_model_namespace::nullml_model stan_model;

